{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","killer","profiles","pos","handleClick","bind","id","this","Math","floor","random","length","console","info","setState","className","src","alt","name","range","icon","faMapMarkerAlt","location","description","onMouseUp","faTimes","faStar","faHeart","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0TAoEeA,E,kDA7Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CAAEC,OAAQC,EAAS,GAAIC,IAAK,GACzC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAJF,E,0DASjB,IADA,IAAIC,EAAKC,KAAKP,MAAMG,IACbG,IAAOC,KAAKP,MAAMG,KACvBG,EAAKE,KAAKC,MAAMD,KAAKE,SAAYR,EAASS,QAG5CC,QAAQC,KAAKP,GACbC,KAAKO,SAAS,CAAEb,OAAQC,EAASI,O,+BAIjC,OACI,yBAAKA,GAAG,UACJ,yBAAKA,GAAG,gBAAgBS,UAAU,OAC9B,yBAAKA,UAAU,UACX,yBAAKC,IAAM,UAAYT,KAAKP,MAAMC,OAAOK,GAAK,OAASW,IAAMV,KAAKR,MAAME,WAIhF,yBAAKK,GAAG,UAAUS,UAAU,OACxB,yBAAKT,GAAG,eAAeS,UAAU,OAC7B,yBAAKA,UAAU,UACX,0BAAMT,GAAG,QAAQC,KAAKP,MAAMC,OAAOiB,MACnC,0BAAMZ,GAAG,UAAUC,KAAKP,MAAMC,OAAOkB,SAI7C,yBAAKb,GAAG,mBAAmBS,UAAU,OACjC,yBAAKA,UAAU,UACX,kBAAC,IAAD,CAAiBK,KAAMC,MACvB,0BAAMf,GAAG,YAAYC,KAAKP,MAAMC,OAAOqB,YAI/C,yBAAKhB,GAAG,sBAAsBS,UAAU,OACpC,yBAAKT,GAAG,4BACJ,2BAAIC,KAAKP,MAAMC,OAAOsB,eAI9B,yBAAKjB,GAAG,kBAAkBS,UAAU,OAChC,yBAAKA,UAAU,iBACX,0BAAMS,UAAWjB,KAAKH,aAAa,kBAAC,IAAD,CAAiBgB,KAAMK,OAC1D,8BAAM,kBAAC,IAAD,CAAiBL,KAAMM,OAC7B,8BAAM,kBAAC,IAAD,CAAiBN,KAAMO,e,GApDnCC,IAAMC,WCMJC,QACW,cAA7BC,OAAOT,SAASU,UAEe,UAA7BD,OAAOT,SAASU,UAEhBD,OAAOT,SAASU,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.7677f965.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMapMarkerAlt, faTimes, faStar, faHeart  } from '@fortawesome/free-solid-svg-icons'\nimport './App.scss';\nimport profiles from './data/profiles.json';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { killer: profiles[0], pos: 0 };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    var id = this.state.pos;\n    while (id === this.state.pos) {\n      id = Math.floor(Math.random() * (profiles.length));\n    }\n    \n    console.info(id);\n    this.setState({ killer: profiles[id] });\n  }\n\n  render() {\n    return (\n        <div id=\"swiper\">\n            <div id=\"profile-image\" className=\"row\">\n                <div className=\"column\">\n                    <img src={ \"images/\" + this.state.killer.id + \".png\" } alt={ this.props.killer } />\n                </div>\n            </div>\n\n            <div id=\"profile\" className=\"row\">\n                <div id=\"profile-name\" className=\"row\">\n                    <div className=\"column\">\n                        <span id=\"name\">{this.state.killer.name}</span>\n                        <span id=\"radius\">{this.state.killer.range}</span>\n                    </div>\n                </div>\n\n                <div id=\"profile-location\" className=\"row\">\n                    <div className=\"column\">\n                        <FontAwesomeIcon icon={faMapMarkerAlt} />\n                        <span id=\"location\">{this.state.killer.location}</span>\n                    </div>\n                </div>\n\n                <div id=\"profile-description\" className=\"row\">\n                    <div id=\"profile-long-description\">\n                        <p>{this.state.killer.description}</p>\n                    </div>\n                </div>\n\n                <div id=\"profile-actions\" className=\"row\">\n                    <div className=\"column column\">\n                        <span onMouseUp={this.handleClick}><FontAwesomeIcon icon={faTimes} /></span>\n                        <span><FontAwesomeIcon icon={faStar} /></span>\n                        <span><FontAwesomeIcon icon={faHeart} /></span>\n                    </div>\n                </div>\n            </div>\n        </div>);\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}