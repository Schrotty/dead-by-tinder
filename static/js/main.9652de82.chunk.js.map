{"version":3,"sources":["serviceWorker.js","useFullscreenStatus.js","App.js","MaxView.js","index.js"],"names":["Boolean","window","location","hostname","match","getBrowserFullscreenElementProp","document","fullscreenElement","mozFullScreenElement","msFullscreenElement","webkitFullscreenElement","Error","App","props","drag","React","createRef","overlay","times","heart","star","state","killer","profiles","pos","animate","bind","onSwipeLeft","onSwipeRight","onStarring","config","trackMouse","trackTouch","preventDefaultTouchmoveEvent","id","this","Math","floor","random","length","setState","card","getElementById","classList","add","addEventListener","handleAnimationEnd","remove","removeEventListener","animation","self","current","changeProfile","onSwipedDown","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipeUp","className","src","alt","ref","icon","faTimes","faHeart","faStar","name","faMapMarkerAlt","description","onMouseUp","Component","MaxView","maxView","useRef","elRef","useState","isFullscreen","setIsFullscreen","useLayoutEffect","onfullscreenchange","undefined","requestFullscreen","then","catch","useFullscreenStatus","e","console","log","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCcN,SAASC,IACP,GAA0C,qBAA/BC,SAASC,kBAClB,MAAO,oBACF,GAA6C,qBAAlCD,SAASE,qBACzB,MAAO,uBACF,GAA4C,qBAAjCF,SAASG,oBACzB,MAAO,sBACF,GAAgD,qBAArCH,SAASI,wBACzB,MAAO,0BAEP,MAAM,IAAIC,MAAM,sD,gFCwHLC,E,kDAzJP,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,KAAOC,IAAMC,YAClB,EAAKC,QAAUF,IAAMC,YACrB,EAAKE,MAAQH,IAAMC,YACnB,EAAKG,MAAQJ,IAAMC,YACnB,EAAKI,KAAOL,IAAMC,YAClB,EAAKK,MAAQ,CACTC,OAAQC,EAAS,GACjBC,IAAK,GAGT,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAElB,EAAKI,OAAS,CAAEC,YAAY,EAAMC,YAAY,EAAMC,8BAA8B,GAlBnE,E,4DAuBf,IADA,IAAIC,EAAKC,KAAKd,MAAMG,IACbU,IAAOC,KAAKd,MAAMG,KACrBU,EAAKE,KAAKC,MAAMD,KAAKE,SAAYf,EAASgB,QAG9CJ,KAAKK,SAAS,CACVhB,IAAKU,EACLZ,OAAQC,EAASW,KAGrB,IAAMO,EAAOnC,SAASoC,eAAe,UACrCD,EAAKE,UAAUC,IAAI,WAAY,WAAY,QAO3CH,EAAKI,iBAAiB,gBALtB,SAASC,IACLL,EAAKE,UAAUI,OAAO,WAAY,WAAY,QAC9CN,EAAKO,oBAAoB,eAAgBF,Q,8BAMzCG,GACJ,IAAMR,EAAOnC,SAASoC,eAAe,UACrCD,EAAKE,UAAUC,IAAI,WAAYK,EAAW,QAE1C,IAAIC,EAAOf,KAYXM,EAAKI,iBAAiB,gBAXtB,SAASC,IACLL,EAAKE,UAAUI,OAAO,WAAYE,EAAW,QAC7CR,EAAKO,oBAAoB,eAAgBF,GAEzCI,EAAKjC,QAAQkC,QAAQR,UAAUI,OAAO,UAAW,MAAO,QAAS,QACjEG,EAAKhC,MAAMiC,QAAQR,UAAUI,OAAO,WACpCG,EAAK/B,MAAMgC,QAAQR,UAAUI,OAAO,WACpCG,EAAK9B,KAAK+B,QAAQR,UAAUI,OAAO,WACnCG,EAAKE,qB,oCAOTjB,KAAKlB,QAAQkC,QAAQR,UAAUC,IAAI,UAAW,OAC9CT,KAAKjB,MAAMiC,QAAQR,UAAUC,IAAI,WACjCT,KAAKV,QAAQ,iBAEbU,KAAKkB,iB,qCAILlB,KAAKlB,QAAQkC,QAAQR,UAAUC,IAAI,UAAW,SAC9CT,KAAKhB,MAAMgC,QAAQR,UAAUC,IAAI,WACjCT,KAAKV,QAAQ,kBAEbU,KAAKkB,iB,mCAILlB,KAAKlB,QAAQkC,QAAQR,UAAUC,IAAI,UAAW,QAC9CT,KAAKf,KAAK+B,QAAQR,UAAUC,IAAI,WAChCT,KAAKV,QAAQ,kBAEbU,KAAKkB,iB,kCAIL/C,SAASoC,eAAe,QAAQC,UAAUC,IAAI,aAC9CtC,SAASoC,eAAe,SAASC,UAAUC,IAAI,OAC/CtC,SAASoC,eAAe,iBAAiBC,UAAUC,IAAI,SACvDtC,SAASoC,eAAe,uBAAuBC,UAAUC,IAAI,W,qCAI7DtC,SAASoC,eAAe,QAAQC,UAAUI,OAAO,aACjDzC,SAASoC,eAAe,SAASC,UAAUI,OAAO,OAClDzC,SAASoC,eAAe,iBAAiBC,UAAUI,OAAO,SAC1DzC,SAASoC,eAAe,uBAAuBC,UAAUI,OAAO,W,+BAIxE,OACI,kBAAC,IAAD,eAAWO,aAAcnB,KAAKR,YAAa4B,cAAepB,KAAKP,aAAe4B,WAAYrB,KAAKsB,UAAWJ,aAAclB,KAAKkB,aAAcpB,8BAA8B,GAAUE,KAAKL,QAChL,yBAAKI,GAAG,SAASwB,UAAU,QACvB,yBAAKA,UAAU,eACX,yBAAKxB,GAAG,gBAAgBwB,UAAU,OAC9B,yBAAKA,UAAU,UACX,yBAAKxB,GAAG,QAAQyB,IAAM,0BAA4BxB,KAAKd,MAAMC,OAAOY,GAAK,OAAS0B,IAAMzB,KAAKtB,MAAMS,SACnG,yBAAKY,GAAG,gBAAgB2B,IAAM1B,KAAKlB,QAAUyC,UAAU,iBACnD,yBAAKG,IAAM1B,KAAKjB,MAAQwC,UAAU,gBAAe,kBAAC,IAAD,CAAiBI,KAAMC,OACxE,yBAAKF,IAAM1B,KAAKhB,MAAQuC,UAAU,gBAAe,kBAAC,IAAD,CAAiBI,KAAME,OACxE,yBAAKH,IAAM1B,KAAKf,KAAOsC,UAAU,gBAAe,kBAAC,IAAD,CAAiBI,KAAMG,WAMvF,yBAAK/B,GAAG,OAAOwB,UAAU,gBACrB,yBAAKxB,GAAG,UAAUwB,UAAU,OACxB,yBAAKxB,GAAG,eAAewB,UAAU,OAC7B,yBAAKA,UAAU,UACX,0BAAMxB,GAAG,QAAQC,KAAKd,MAAMC,OAAO4C,QAI3C,yBAAKhC,GAAG,mBAAmBwB,UAAU,OACjC,yBAAKA,UAAU,UACX,kBAAC,IAAD,CAAiBI,KAAMK,MACvB,0BAAMjC,GAAG,YAAYC,KAAKd,MAAMC,OAAOpB,YAI/C,yBAAKgC,GAAG,sBAAsBwB,UAAU,OACpC,uBAAGxB,GAAG,4BACDC,KAAKd,MAAMC,OAAO8C,iBAOvC,yBAAKlC,GAAG,UAAUwB,UAAU,OACxB,yBAAKA,UAAU,iBACX,0BAAMW,UAAWlC,KAAKR,aAAa,kBAAC,IAAD,CAAiBmC,KAAMC,OAC1D,0BAAMM,UAAWlC,KAAKN,YAAY,kBAAC,IAAD,CAAiBiC,KAAMG,OACzD,0BAAMI,UAAWlC,KAAKP,cAAc,kBAAC,IAAD,CAAiBkC,KAAME,c,GAlJjEjD,IAAMuD,WCFT,SAASC,IACpB,IAAMC,EAAUzD,IAAM0D,OAAO,MAG7B,IAAK,IAAD,EFNO,SAA6BC,GAAQ,IAAD,EACT3D,IAAM4D,SACG,MAA/CrE,SAASD,MAFsC,mBAC1CuE,EAD0C,KAC5BC,EAD4B,KAyBjD,OAPA9D,IAAM+D,iBAAgB,WAIpB,OAHAxE,SAASyE,mBAAqB,kBAC5BF,EAA+D,MAA/CvE,SAASD,OAEpB,kBAAOC,SAASyE,wBAAqBC,MAGvC,CAACJ,EApBc,WACC,MAAjBF,EAAMvB,SAEVuB,EAAMvB,QACH8B,oBACAC,MAAK,WACJL,EAA+D,MAA/CvE,SAASD,SAE1B8E,OAAM,WACLN,GAAgB,QEPgBO,CAAoBZ,GADpD,6BAEF,MAAOa,IACQ,OACGL,EAClBM,QAAQC,IAAI,SAGd,OAAO,kBAAC,EAAD,CAAK1B,IAAMW,ICXtBgB,IAASC,OAAO,kBAAClB,EAAD,MAAajE,SAASoC,eAAe,SJ4H/C,kBAAmBgD,WACrBA,UAAUC,cAAcC,MACrBV,MAAK,SAAAW,GACJA,EAAaC,gBAEdX,OAAM,SAAAY,GACLT,QAAQS,MAAMA,EAAMC,a","file":"static/js/main.9652de82.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//CREDITS: https://github.com/Darth-Knoppix/example-react-fullscreen/blob/master/src/utils/useFullscreenStatus.js\r\n\r\nimport React from \"react\";\r\n\r\nexport default function useFullscreenStatus(elRef) {\r\n  const [isFullscreen, setIsFullscreen] = React.useState(\r\n    document[getBrowserFullscreenElementProp()] != null\r\n  );\r\n\r\n  const setFullscreen = () => {\r\n    if (elRef.current == null) return;\r\n\r\n    elRef.current\r\n      .requestFullscreen()\r\n      .then(() => {\r\n        setIsFullscreen(document[getBrowserFullscreenElementProp()] != null);\r\n      })\r\n      .catch(() => {\r\n        setIsFullscreen(false);\r\n      });\r\n  };\r\n\r\n  React.useLayoutEffect(() => {\r\n    document.onfullscreenchange = () =>\r\n      setIsFullscreen(document[getBrowserFullscreenElementProp()] != null);\r\n\r\n    return () => (document.onfullscreenchange = undefined);\r\n  });\r\n\r\n  return [isFullscreen, setFullscreen];\r\n}\r\n\r\nfunction getBrowserFullscreenElementProp() {\r\n  if (typeof document.fullscreenElement !== \"undefined\") {\r\n    return \"fullscreenElement\";\r\n  } else if (typeof document.mozFullScreenElement !== \"undefined\") {\r\n    return \"mozFullScreenElement\";\r\n  } else if (typeof document.msFullscreenElement !== \"undefined\") {\r\n    return \"msFullscreenElement\";\r\n  } else if (typeof document.webkitFullscreenElement !== \"undefined\") {\r\n    return \"webkitFullscreenElement\";\r\n  } else {\r\n    throw new Error(\"fullscreenElement is not supported by this browser\");\r\n  }\r\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMapMarkerAlt, faTimes, faStar, faHeart } from '@fortawesome/free-solid-svg-icons'\nimport { Swipeable } from 'react-swipeable'\n\nimport './App.scss';\nimport profiles from './data/profiles.json';\n\nclass App extends React.Component {\n        constructor(props) {\n            super(props);\n\n            this.drag = React.createRef();\n            this.overlay = React.createRef();\n            this.times = React.createRef();\n            this.heart = React.createRef();\n            this.star = React.createRef();\n            this.state = {\n                killer: profiles[0],\n                pos: 0\n            };\n\n            this.animate = this.animate.bind(this);\n            this.onSwipeLeft = this.onSwipeLeft.bind(this);\n            this.onSwipeRight = this.onSwipeRight.bind(this);\n            this.onStarring = this.onStarring.bind(this);\n\n            this.config = { trackMouse: true, trackTouch: true, preventDefaultTouchmoveEvent: false }\n        }\n\n        changeProfile() {\n            var id = this.state.pos;\n            while (id === this.state.pos) {\n                id = Math.floor(Math.random() * (profiles.length));\n            }\n\n            this.setState({\n                pos: id,\n                killer: profiles[id]\n            });\n\n            const card = document.getElementById(\"swiper\");\n            card.classList.add('animated', \"bounceIn\", \"fast\");\n\n            function handleAnimationEnd() {\n                card.classList.remove('animated', \"bounceIn\", \"fast\")\n                card.removeEventListener('animationend', handleAnimationEnd)\n            }\n\n            card.addEventListener('animationend', handleAnimationEnd);\n        }\n\n        animate(animation) {\n            const card = document.getElementById(\"swiper\");\n            card.classList.add('animated', animation, \"slow\");\n            \n            var self = this;\n            function handleAnimationEnd() {\n                card.classList.remove('animated', animation, \"slow\")\n                card.removeEventListener('animationend', handleAnimationEnd)\n\n                self.overlay.current.classList.remove(\"visible\", \"red\", \"green\", \"blue\");\n                self.times.current.classList.remove(\"visible\");\n                self.heart.current.classList.remove(\"visible\");\n                self.star.current.classList.remove(\"visible\");\n                self.changeProfile();\n            }\n\n            card.addEventListener('animationend', handleAnimationEnd);\n        }\n\n        onSwipeLeft() {\n            this.overlay.current.classList.add(\"visible\", \"red\");\n            this.times.current.classList.add(\"visible\");\n            this.animate(\"bounceOutLeft\");\n\n            this.onSwipedDown();\n        }\n\n        onSwipeRight() {\n            this.overlay.current.classList.add(\"visible\", \"green\");\n            this.heart.current.classList.add(\"visible\");\n            this.animate(\"bounceOutRight\");\n\n            this.onSwipedDown();\n        }\n\n        onStarring() {\n            this.overlay.current.classList.add(\"visible\", \"blue\");\n            this.star.current.classList.add(\"visible\");\n            this.animate(\"bounceOutRight\");\n\n            this.onSwipedDown();\n        }\n\n        onSwipeUp() {\n            document.getElementById(\"desc\").classList.add(\"swiped-up\");\n            document.getElementById(\"image\").classList.add(\"min\");\n            document.getElementById(\"image-overlay\").classList.add(\"maxed\");\n            document.getElementById(\"profile-description\").classList.add(\"maxed\");   \n        }\n\n        onSwipedDown() {\n            document.getElementById(\"desc\").classList.remove(\"swiped-up\");\n            document.getElementById(\"image\").classList.remove(\"min\");\n            document.getElementById(\"image-overlay\").classList.remove(\"maxed\");\n            document.getElementById(\"profile-description\").classList.remove(\"maxed\");\n        }\n\n  render() {\n    return (\n        <Swipeable onSwipedLeft={this.onSwipeLeft} onSwipedRight={this.onSwipeRight}  onSwipedUp={this.onSwipeUp} onSwipedDown={this.onSwipedDown} preventDefaultTouchmoveEvent={true} {...this.config}>\n                <div id=\"swiper\" className=\"card\">\n                    <div className=\"card-header\">\n                        <div id=\"profile-image\" className=\"row\">\n                            <div className=\"column\">\n                                <img id=\"image\" src={ \"/dead-by-tinder/images/\" + this.state.killer.id + \".png\" } alt={ this.props.killer } />\n                                <div id=\"image-overlay\" ref={ this.overlay } className=\"image-overlay\">\n                                    <div ref={ this.times } className=\"overlay-text\"><FontAwesomeIcon icon={faTimes} /></div>\n                                    <div ref={ this.heart } className=\"overlay-text\"><FontAwesomeIcon icon={faHeart} /></div>\n                                    <div ref={ this.star } className=\"overlay-text\"><FontAwesomeIcon icon={faStar} /></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id=\"desc\" className=\"card-content\">\n                        <div id=\"profile\" className=\"row\">\n                            <div id=\"profile-name\" className=\"row\">\n                                <div className=\"column\">\n                                    <span id=\"name\">{this.state.killer.name}</span>\n                                </div>\n                            </div>\n\n                            <div id=\"profile-location\" className=\"row\">\n                                <div className=\"column\">\n                                    <FontAwesomeIcon icon={faMapMarkerAlt} />\n                                    <span id=\"location\">{this.state.killer.location}</span>\n                                </div>\n                            </div>\n\n                            <div id=\"profile-description\" className=\"row\">\n                                <p id=\"profile-long-description\">\n                                    {this.state.killer.description}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div id=\"actions\" className=\"row\">\n                    <div className=\"column column\">\n                        <span onMouseUp={this.onSwipeLeft}><FontAwesomeIcon icon={faTimes} /></span>\n                        <span onMouseUp={this.onStarring}><FontAwesomeIcon icon={faStar} /></span>\n                        <span onMouseUp={this.onSwipeRight}><FontAwesomeIcon icon={faHeart} /></span>\n                    </div>\n                </div>\n        </Swipeable>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './index.css';\r\n\r\nimport useFullscreenStatus from \"./useFullscreenStatus\";\r\nimport App from './App';\r\n\r\nexport default function MaxView() {\r\n    const maxView = React.useRef(null);\r\n    let isFullscreen, setIsFullscreen;\r\n    \r\n    try {\r\n      [isFullscreen, setIsFullscreen] = useFullscreenStatus(maxView);\r\n    } catch (e) {\r\n      isFullscreen = false;\r\n      setIsFullscreen = undefined;\r\n      console.log(\"error\");\r\n    }\r\n  \r\n    return(<App ref={ maxView } />);\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport MaxView from './MaxView';\n\nReactDOM.render(<MaxView />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}